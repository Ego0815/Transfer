import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.stereotype.Service;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

@Service
public class ActiveMQService {
    
    private final RestTemplate restTemplate;
    private final String activeMqBaseUrl;
    private final String username;
    private final String password;
    
    public ActiveMQService() {
        this.restTemplate = new RestTemplate();
        this.activeMqBaseUrl = "http://localhost:8161";
        this.username = "admin";
        this.password = "admin";
    }
    
    public ActiveMQService(String baseUrl, String username, String password) {
        this.restTemplate = new RestTemplate();
        this.activeMqBaseUrl = baseUrl;
        this.username = username;
        this.password = password;
    }
    
    /**
     * Leert eine ActiveMQ Queue über die Jolokia REST-API
     * 
     * @param queueName Name der Queue (z.B. "abc/xyz/testqueue")
     * @param brokerName Name des Brokers (Standard: "localhost")
     * @return Response als String
     */
    public String purgeQueue(String queueName, String brokerName) {
        String url = activeMqBaseUrl + "/api/jolokia/";
        
        // JSON-Payload für den Jolokia-Request erstellen
        Map<String, Object> payload = new HashMap<>();
        payload.put("type", "exec");
        payload.put("mbean", String.format(
            "org.apache.activemq:type=Broker,brokerName=%s,destinationType=Queue,destinationName=%s",
            brokerName, queueName
        ));
        payload.put("operation", "purge");
        
        // Headers setzen
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", createBasicAuthHeader());
        
        // Request erstellen
        HttpEntity<Map<String, Object>> requestEntity = new HttpEntity<>(payload, headers);
        
        try {
            ResponseEntity<String> response = restTemplate.exchange(
                url,
                HttpMethod.POST,
                requestEntity,
                String.class
            );
            
            return response.getBody();
            
        } catch (Exception e) {
            throw new RuntimeException("Fehler beim Purgen der Queue: " + queueName, e);
        }
    }
    
    /**
     * Convenience-Methode mit Standard-Broker-Namen
     */
    public String purgeQueue(String queueName) {
        return purgeQueue(queueName, "localhost");
    }
    
    /**
     * Erstellt Basic Auth Header
     */
    private String createBasicAuthHeader() {
        String credentials = username + ":" + password;
        String base64Credentials = Base64.getEncoder().encodeToString(credentials.getBytes());
        return "Basic " + base64Credentials;
    }
    
    /**
     * Prüft die Anzahl der Nachrichten in einer Queue
     */
    public String getQueueSize(String queueName, String brokerName) {
        String url = activeMqBaseUrl + "/api/jolokia/";
        
        Map<String, Object> payload = new HashMap<>();
        payload.put("type", "read");
        payload.put("mbean", String.format(
            "org.apache.activemq:type=Broker,brokerName=%s,destinationType=Queue,destinationName=%s",
            brokerName, queueName
        ));
        payload.put("attribute", "QueueSize");
        
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", createBasicAuthHeader());
        
        HttpEntity<Map<String, Object>> requestEntity = new HttpEntity<>(payload, headers);
        
        try {
            ResponseEntity<String> response = restTemplate.exchange(
                url,
                HttpMethod.POST,
                requestEntity,
                String.class
            );
            
            return response.getBody();
            
        } catch (Exception e) {
            throw new RuntimeException("Fehler beim Abrufen der Queue-Größe: " + queueName, e);
        }
    }
}

// Beispiel-Controller für die Verwendung
@RestController
@RequestMapping("/activemq")
public class ActiveMQController {
    
    private final ActiveMQService activeMQService;
    
    public ActiveMQController(ActiveMQService activeMQService) {
        this.activeMQService = activeMQService;
    }
    
    @DeleteMapping("/queue/{queueName}/purge")
    public ResponseEntity<String> purgeQueue(@PathVariable String queueName) {
        try {
            // Queue-Name mit Slashes funktioniert direkt
            String result = activeMQService.purgeQueue(queueName);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body("Fehler: " + e.getMessage());
        }
    }
    
    @GetMapping("/queue/{queueName}/size")
    public ResponseEntity<String> getQueueSize(@PathVariable String queueName) {
        try {
            String result = activeMQService.getQueueSize(queueName, "localhost");
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body("Fehler: " + e.getMessage());
        }
    }
}

// Beispiel für die direkte Verwendung
@Component
public class ActiveMQExample {
    
    private final ActiveMQService activeMQService;
    
    public ActiveMQExample(ActiveMQService activeMQService) {
        this.activeMQService = activeMQService;
    }
    
    public void beispielVerwendung() {
        try {
            // Queue mit Slashes im Namen purgen
            String result = activeMQService.purgeQueue("abc/xyz/testqueue");
            System.out.println("Purge Result: " + result);
            
            // Queue-Größe prüfen
            String size = activeMQService.getQueueSize("abc/xyz/testqueue", "localhost");
            System.out.println("Queue Size: " + size);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
